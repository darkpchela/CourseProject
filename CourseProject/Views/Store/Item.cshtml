@model ItemVM
@inject IViewLocalizer localizer
@inject ISessionHelper sessionHelper

<div class="h-100">
    <div class="h-100 w-100 mt-3 d-flex flex-column">
        <div class="border-bottom-custom">
            <div class="col-8 offset-2 text-center">
                <h4 class="d-inline-block w-75">
                    "@Model.Name"
                </h4>
                <h5>
                    @localizer["Collections"]:
                    @foreach (var collection in Model.Collections)
                    {
                        <a class="btn font-weight-bold" asp-action="Collection" asp-controller="Store" asp-route-id="@collection.Id">"@collection.Name"</a><br />
                    }
                </h5>
                <h6>
                    @localizer["Owner"]: <a class="btn font-weight-bold" asp-action="Info" asp-controller="Profile" asp-route-id="@Model.Owner.Id">@Model.Owner.Username</a>
                </h6>
            </div>
        </div>

        <div class="d-flex flex-row flex-wrap justify-content-center w-100 border-bottom-custom">
            <div class="flex-grow-0">
                <div class="p-2 text-center">
                    <div class="position-relative">
                        <img class="img-fluid img-thumbnail mx-square-40" src="@Model.ImageUrl" alt="picture">
                    </div>
                    <div class="position-relative mt-2">
                        <h5>"@Model.Name"</h5>
                        @if (User.IsInRole("admin") || Model.Owner.Id == sessionHelper.GetCurrentUserId())
                        {
                            <a asp-action="EditItem" asp-controller="Profile" asp-route-id="@Model.Id"
                               class="btn btn-hidden p-0 position-absolute medium-icon" style="bottom: -40%; right: 0px;">
                                <svg xmlns="http://www.w3.org/2000/svg"
                                     fill="currentColor" class="h-100" viewBox="0 0 16 16">
                                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456l-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                    <path fill-rule="evenodd"
                                          d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                                </svg>
                            </a>
                        }
                    </div>
                </div>
            </div>
            <div class="flex-grow-1 p-1 text-center">
                <h5 class="text-center">@localizer["Description"]</h5>
                <div class="w-100" style="min-width: 300px;">
                    @Model.Description
                </div>
                <div id="itemFields" class="border-top-custom mt-1">
                    @foreach (var field in Model.Fields)
                    {
                        <div class="d-flex flex-row align-items-baseline border-bottom-custom m-1">
                            <h6 class="text-center font-italic w-25 text-wrap">
                                @field.Name
                            </h6>
                            <div>
                                @if (field.Type == "Boolen")
                                {
                                    if (field.Value == "true")
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor"
                                             class="medium-icon" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd"
                                                  d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z" />
                                        </svg>
                                    }
                                    else
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor"
                                             class="medium-icon" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd"
                                                  d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                                        </svg>
                                    }

                                }
                                else
                                {
                                    <div>
                                        @field.Value
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                <div class="text-right font-italic ">
                    @Model.CreatedAt.ToShortDateString()
                </div>
                <div>
                    <div id="itemTags" class="d-flex flex-row flex-wrap align-items-baseline justify-content-start mt-2 border-top-custom">
                        <h6 class="m-2 font-italic text-muted">@localizer["tags"]:</h6>
                        @foreach (var tag in Model.ItemTags)
                        {
                            <span class="d-block font-weight-light ml-1">@tag</span>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="text-center border-bottom-custom p-2">
            <a href="#" id="btnLike" class="btn">
                <svg id="disliked" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 16" class="medium-icon">
                    <path fill-rule="evenodd"
                          d="M8 2.748l-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01L8 2.748zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143c.06.055.119.112.176.171a3.12 3.12 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15z" />
                </svg>
                <svg id="liked" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg" class="medium-icon" style="display:none;">
                    <path fill-rule="evenodd" d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z" />
                </svg>
            </a>
            <span class="ml-2" id="likesCount">@Model.ItemLikes.Count</span>
        </div>

        <div>
            <h5 class="text-center">@localizer["Comments"]</h5>
            <div id="comments" class="d-flex flex-column ">
                @foreach (var comment in Model.ItemComments.OrderByDescending(c => c.CreationDate))
                {
                    <div name='comment' class="p-1 border-custom">
                        <h6 class="d-inline-block w-25 text-right">
                            @comment.User.Username
                        </h6>
                        <p class="d-inline-block ">
                            @comment.Value
                        </p>
                    </div>
                }
            </div>
        </div>

        <input type="hidden" id="itemId" value="@Model.Id" />
        <input type="hidden" id="itemLiked" value="@Model.Liked" />
    </div>

    <div class="d-none">
        <div id="commentProto" name='comment' class="p-1 border-custom">
            <h6 data-prop="user" class="d-inline-block w-25 text-right">
            </h6>
            <p data-prop="value" class="d-inline-block ">
            </p>
        </div>
    </div>

    @if (User.Identity.IsAuthenticated)
    {
        <div class="position-fixed h-10 w-50vw m-auto" style="bottom: 0; left:25%;">
            <div class="d-flex flex-row  align-items-center justify-content-center">
                <h6 class="flex-grow-0 align-self-start">@User.Identity.Name</h6>
                <textarea id="commentValue" class="flex-grow-1 rounded p-2"></textarea>
                <a id="btnComment" href="#" class="btn flex-grow-0">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="medium-icon"
                         viewBox="0 0 16 16">
                        <path fill-rule="evenodd"
                              d="M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103zM2.25 8.184l3.897 1.67a.5.5 0 0 1 .262.263l1.67 3.897L12.743 3.52 2.25 8.184z" />
                    </svg>
                </a>
            </div>
        </div>
    }
</div>

@section Scripts{
    <script src="~/lib/signalr/signalr.min.js"></script>
    <script>
        let connectionId;
        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/itemHub")
            .build();

        hubConnection.on("OnConnected", (id) => {
            connectionId = id;
            hubConnection.invoke("ConnectGroup", $('#itemId').val())
        });

        hubConnection.on("OnItemLiked", (result, id) => {
            if (result.succeed === true) {
                let count = $('#likesCount').text();
                result.result == 0 ? count++ : count--;
                $('#likesCount').text(count);
                if (id == connectionId) {
                    if (result.result == 0) {
                        $('#disliked').hide();
                        $('#liked').show();
                    }
                    else {
                        $('#liked').hide();
                        $('#disliked').show();
                    }
                }
            }
            else {
                console.log(result.errors)
            }
        });

        hubConnection.on("OnCommentMade", (result) => {
            if (result.succeed) {
                let comment = getCommentElem(result);
                $('#comments').prepend(comment);
            }
            else {
                console.log(result.errors)
            }
        });

        hubConnection.start();

        const getCommentElem = (props) => {
            let elem = $('#commentProto').clone().removeAttr('id');
            elem.find('[data-prop=user]').text(props.userName);
            elem.find('[data-prop=value]').text(props.value);
            return elem;
        };

        $('#btnComment').click(e => {
            e.preventDefault();
            let itemId = $('#itemId').val();
            let value = $('#commentValue').val();
            hubConnection.invoke("SendComment", itemId, value);
        });

        $('#btnLike').click(e => {
            e.preventDefault();
            let itemId = $('#itemId').val();
            hubConnection.invoke("SendLike", itemId);
        });

        $(() => {
            if ($('#itemLiked').val() != "") {
                $('#disliked').hide();
                $('#liked').show();
            }
            else {
                $('#liked').hide();
                $('#disliked').show();
            }
        });
    </script>
}