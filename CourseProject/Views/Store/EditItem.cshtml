@model EditItemVM
@inject IUserCrudService userService
<div class="d-flex justify-content-center mt-2">
    <div class="d-flex flex-column align-items-stretch w-75 mt-2" style="max-width: 768px;">
        <h3 class="text-center">
            Edit Item
        </h3>

        <div class="align-self-center p-1">
            <div name="imgContainer">
                <div class="square-25 d-flex justify-content-center align-items-center">
                    <a id="changeImage" href="" class="btn p-0">
                        <img class="img-fluid img-thumbnail" src="@Model.ImageUrl" />
                    </a>
                </div>
            </div>
            <div id="dzContainer" style="display: none;">
                <div id="dropzone" class="dropzone d-flex p-0 justify-content-center square-25">
                </div>
            </div>
        </div>

        <form asp-action="EditItem" asp-controller="Store" method="post" class="d-flex flex-column align-items-center mt-2">
            <input type="text" class="form-control w-75 text-center" asp-for="@Model.Name" placeholder="Item name">

            @{
                var user = await userService.GetAsync(int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier) ?? "0"));
                if (user != null)
                {
                    @Html.DropDownListFor(m => m.CollectionId, new SelectList(user.Collections, "Id", "Name"), "Select collection", new { @class = "mt-2 form-control w-75 text-center" });
                }
            }

            <div class="text-center mt-3 w-75">
                <h6 class="text-muted">Description(Markdown)</h6>
                <textarea class="form-control form-control w-100 text-center" placeholder="Item description" asp-for="Description" style="min-height: 20vh;"></textarea>
            </div>

            <div class="text-center w-75 mt-3">
                <h6 class="text-muted">Optional fields</h6>
                <div id="fields">
                </div>
            </div>

            <div class="text-center w-75 mt-2">
                <input asp-for="Tags" type="text" class="form-control text-center" placeholder="tags">
            </div>

            <div class="w-75 d-flex flex-row justify-content-between mt-2">
                <a asp-action="Profile" asp-controller="Store" asp-route-id="@Model.OwnerId" class="btn p-0">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor"
                         class="bigger-icon" viewBox="0 0 16 16">
                        <path fill-rule="evenodd"
                              d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                    </svg>
                </a>
                <button type="submit" class="btn p-0">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor"
                         class="bigger-icon" viewBox="0 0 16 16">
                        <path fill-rule="evenodd"
                              d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z" />
                    </svg>
                </button>
            </div>

            <div asp-validation-summary="All" class="text-danger font-weight-bold">
            </div>
            <input type="hidden" asp-for="@Model.ResourceId" value="@Model.ResourceId" />
            <input type="hidden" asp-for="@Model.OwnerId" value="@Model.OwnerId" />
            <input type="hidden" asp-for="@Model.ImageUrl" value="@Model.ImageUrl" />
            <input type="hidden" asp-for="@Model.ItemId" value="@Model.ItemId" />
        </form>
    </div>
</div>

<div id="cashedFields" class="d-none">
    @Html.Raw(Json.Serialize(Model.Fields))
</div>

<div id="tpl" class="d-none">
    @{await Html.RenderPartialAsync("_DropzoneTemplate"); }
</div>

<div class="d-none">
    <div id="fieldProto" name="field">
        <div class="border-custom rounded ">
            <div name="fieldBody" class="d-flex flex-row flex-nowrap justify-content-between p-1">
                <input data-prop="fieldId" type="hidden" />
                <input data-prop="name" type="hidden" />
                <input data-prop="type" type="hidden" />
                <input data-prop="itemFieldId" type="hidden" />
                <label name="fieldName" class="d-inline-block text-center p-1 w-50">FieldName</label>
            </div>
        </div>
    </div>
</div>

@section Scripts{

    <script src="~/lib/dropzone-5.7.0/dist/dropzone.js"></script>
    <script>
        Dropzone.autoDiscover = false;
        $('#dropzone').dropzone({
            addRemoveLinks: true,
            maxFiles: 1,
            maxFileSeize: 20,
            method: 'post',
            url: '/api/UploadImage',
            previewTemplate: $('#tpl').html(),
            success: (file, response) => {
                console.log(response);
                if (response.succeed === true) {
                    $('#dropzone img').attr('src', response.url);
                    $('#ResourceId').val(response.id);
                    $('#ImageUrl').val(response.url);
                }
                else {
                    console.log(response.error);
                }
            },
            removedfile: () => {
                $.post('/api/AbortUpload');
                $('#dropzone .dz-preview').remove();
            }
        });
        $('#changeImage').click(e => {
            e.preventDefault();
            $(e.target).parents('[name=imgContainer]').hide();
            $('#dzContainer').show();
        });
    </script>
    <script>
        const getInputFuncDictionary = {
            "Boolen": (value) => {
                if (value != 'true')
                    value = false;
                let elem = $('<div />', {
                    class: "d-inline-block text-center w-75"
                });
                let input = $('<input />', {
                    type: 'hidden',
                    'data-prop': 'value'
                });
                input.val(value);
                let checkbox = $('<input />', {
                    type: 'checkbox',
                    class: "form-control"
                });
                checkbox.prop('checked', value);
                checkbox.change(e => {
                    e.preventDefault();
                    $(e.target).is(':checked') ? input.val('true') : input.val('false');
                });
                elem.append(checkbox).append(input)
                return elem;
            },
            "Date": (value) => {
                let elem = $('<input />', {
                    type: "date",
                    class: "d-inline-block text-center form-control w-75",
                    'data-prop': 'value'
                });
                elem.val(value);
                return elem;
            },
            "ShortString": (value) => {
                let elem = $('<input />', {
                    type: "text",
                    class: "d-inline-block text-center form-control w-75",
                    'data-prop': 'value'
                });
                elem.val(value);
                return elem;
            },
            "LongString": (value) => {
                let elem = $('<textarea />', {
                    class: "d-inline-block text-center form-control w-75",
                    value: value,
                    'data-prop': 'value'
                });
                elem.val(value);
                return elem;
            },
            "Number": (value) => {
                let elem = $('<input />', {
                    type: 'number',
                    class: "d-inline-block text-center form-control w-75",
                    value: value,
                    'data-prop': 'value'
                });
                elem.val(value);
                return elem;
            }
        };
        const fieldsElem = $('#fields');
        const updateFieldNames = () => {
            let fields = $('#fields [name=field]');
            for (let i = 0; i < fields.length; i++) {
                setFieldName(fields[i], i);
            }
        };
        const setFieldName = (field, id) => {
            $(field).find('[data-prop=value]').attr('name', `Fields[${id}].Value`);
            $(field).find('[data-prop=fieldId]').attr('name', `Fields[${id}].FieldId`);
            $(field).find('[data-prop=name]').attr('name', `Fields[${id}].Name`);
            $(field).find('[data-prop=type]').attr('name', `Fields[${id}].Type`);
            $(field).find('[data-prop=itemFieldId]').attr('name', `Fields[${id}].ItemFieldId`);
        };

        const getFieldElem = (fieldVM) => {
            let field = $('#fieldProto').clone(true).removeAttr('id');
            field.find('[name=fieldName]').text(fieldVM.name);
            field.find('[data-prop=name]').val(fieldVM.name);
            field.find('[data-prop=fieldId]').val(fieldVM.fieldId);
            field.find('[data-prop=type]').val(fieldVM.type);
            field.find('[data-prop=itemFieldId]').val(fieldVM.itemFieldId);
            let inputElem = getInputFuncDictionary[fieldVM.type](fieldVM.value);
            field.find('[name=fieldBody]').append(inputElem);
            return field;
        };
        const loadFields = id => {
            fieldsElem.empty();
            $.post("/api/GetCollectionFields",
                { id: id },
                data => {
                    for (let i = 0; i < data.length; i++) {
                        let field = getFieldElem(data[i]);
                        fieldsElem.append(field);
                    }
                    updateFieldNames();
                }
            );
        };

        $('#CollectionId').change(e => {
            $(e.target).children('[value=""]').remove();
            e.preventDefault();
            let id = $(e.target).val();
            loadFields(id);
        });

        $(() => {
            let cashedFields = JSON.parse($('#cashedFields').text());
            for (let i = 0; i < cashedFields.length; i++) {
                let field = getFieldElem(cashedFields[i]);
                fieldsElem.append(field);
            }
            updateFieldNames();
        });
    </script>
}